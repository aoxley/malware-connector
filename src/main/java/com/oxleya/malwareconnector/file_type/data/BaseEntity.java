package com.oxleya.malwareconnector.file_type.data;

import com.oxleya.malwareconnector.file_type.data.relationship.SimilarityEdge;
import org.neo4j.ogm.annotation.GeneratedValue;
import org.neo4j.ogm.annotation.Id;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

/**
 * base entity for all neo4j objects.
 */
@NodeEntity
abstract public class BaseEntity {

    private static final Logger LOGGER = LoggerFactory.getLogger(BaseEntity.class);

    public static final String SIMILARITY_REASON_FUZZY_HASH = "Fuzzy Hash";

    @Id
    @GeneratedValue
    private Long id;

    @Relationship(type = "EXTRACTED_FROM", direction = Relationship.OUTGOING)
    private BaseEntity parentEntity;

    @Relationship(type = "SIMILAR_TO")
    private Set<SimilarityEdge> edgesOfSimilarNodes = new HashSet<>();

    public void linkToSimilarNode(BaseEntity similarNode, String reason) {
        SimilarityEdge newEdge = new SimilarityEdge(this, similarNode);
        if (this.edgesOfSimilarNodes.contains(newEdge)) {
            newEdge = getThisExistingEdge(newEdge);
        }
        newEdge.addReason(reason);
        this.edgesOfSimilarNodes.add(newEdge);
    }

    private SimilarityEdge getThisExistingEdge(SimilarityEdge newEdge) {
        for (SimilarityEdge storedEdge : this.edgesOfSimilarNodes) {
            if (storedEdge.equals(newEdge)) {
                return storedEdge;
            }
        }
        LOGGER.warn("The edge does not exist, why are you calling to get similar connection?");
        return newEdge;
    }

    public Long getId() {
        return id;
    }

    public BaseEntity getParentEntity() {
        return parentEntity;
    }

    public void setParentEntity(BaseEntity parentEntity) {
        this.parentEntity = parentEntity;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        BaseEntity that = (BaseEntity) o;
        return Objects.equals(id, that.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }
}
