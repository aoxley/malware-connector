package com.oxleya.malwareconnector.configuration;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.integration.annotation.InboundChannelAdapter;
import org.springframework.integration.annotation.Poller;
import org.springframework.integration.annotation.Transformer;
import org.springframework.integration.channel.DirectChannel;
import org.springframework.integration.config.EnableIntegration;
import org.springframework.integration.core.MessageSource;
import org.springframework.integration.file.FileReadingMessageSource;
import org.springframework.integration.file.filters.AcceptOnceFileListFilter;
import org.springframework.integration.file.filters.SimplePatternFileListFilter;
import org.springframework.integration.file.transformer.FileToStringTransformer;
import org.springframework.integration.scheduling.PollerMetadata;
import org.springframework.integration.transaction.*;
import org.springframework.messaging.MessageChannel;

import java.io.File;

/**
 * Setups up spring integration configuration.
 * This is primarily for robust file handling.
 *
 * This works in conjunction with spring-integration-configuration.xml
 */
@Configuration
@EnableIntegration
public class SpringIntegrationConfiguration {

    @Value("${base.application.folder}")
    private String baseApplicationFolder;

    @Bean
    public MessageChannel fileInputChannel() {
        return new DirectChannel();
    }

    @Bean
    public PseudoTransactionManager transactionManager() {
        return new PseudoTransactionManager();
    }

    @Bean
    //@InboundChannelAdapter(value = "javascriptInputChannel", poller = @Poller(fixedDelay = "4000")) configured in xml
    public MessageSource<File> fileReadingMessageSource() {
        FileReadingMessageSource source = new FileReadingMessageSource();
        source.setDirectory(new File(baseApplicationFolder + File.separator + "put-malware-here"));
        source.setFilter(new SimplePatternFileListFilter("*.js"));
        return source;
    }

    @Bean
    @Transformer(inputChannel = "transformJavascriptChannel", outputChannel = "javascriptProcessingChannel")
    public FileToStringTransformer fileToStringTransformer() {
        return new FileToStringTransformer();
    }
}
