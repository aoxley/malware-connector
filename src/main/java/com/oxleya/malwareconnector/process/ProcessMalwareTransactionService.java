package com.oxleya.malwareconnector.process;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.integration.annotation.ServiceActivator;
import org.springframework.messaging.handler.annotation.Header;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

/**
 * This handles the transactional side of processing malware samples. It handles what to do in the case of a
 * successful or failure of the transaction.
 *
 * Refer to spring-integration-configuration.xml for how it is configured.
 */
@Component
public class ProcessMalwareTransactionService {

    @Value("${base.application.folder}")
    private String baseApplicationFolder;

    @ServiceActivator(inputChannel = "successfulMalwareTransactionChannel", outputChannel = "nullChannel")
    private void onSuccess(@Header("file_originalFile") String fileLocation) throws IOException {
        Path originalMalwareSample = Paths.get(fileLocation);
        Path successFolder = Paths.get(Paths.get(baseApplicationFolder) + File.separator + "success");
        if (Files.notExists(successFolder)) {
            Files.createDirectories(successFolder);
        }
        Files.move(originalMalwareSample, Paths.get(successFolder + File.separator + originalMalwareSample.getFileName()));
    }

    @ServiceActivator(inputChannel = "failedMalwareTransactionChannel", outputChannel = "nullChannel")
    private void onFailure(@Header("file_originalFile") String fileLocation) throws IOException {
        Path originalMalwareSample = Paths.get(fileLocation);
        Path failureFolder = Paths.get(Paths.get(baseApplicationFolder) + File.separator + "failure");
        if (Files.notExists(failureFolder)) {
            Files.createDirectories(failureFolder);
        }
        Files.move(originalMalwareSample, Paths.get(failureFolder + File.separator + originalMalwareSample.getFileName()));
    }
}
