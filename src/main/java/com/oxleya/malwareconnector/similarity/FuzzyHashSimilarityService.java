package com.oxleya.malwareconnector.similarity;

import com.github.s3curitybug.similarityuniformfuzzyhash.UniformFuzzyHash;
import com.github.s3curitybug.similarityuniformfuzzyhash.UniformFuzzyHashes;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Determines the similarity of two items based off the concept of fuzzy hashing.
 */
public class FuzzyHashSimilarityService {

    private static final int FACTOR = 5;
    private static final Double SIMILARITY_THRESHOLD = 0.6d;


    /**
     * Takes a map where the key is the ID of the object, and string is the string representation of the fuzzy hash.
     *
     * Returns a list of all IDs which are deemed similar to text in question.
     * @param text
     * @param hashes
     * @return
     */
    public static List<Long> areSimilar(String text, Map<Long, String> hashes) {
        final Map<Long, UniformFuzzyHash> hashObjects = UniformFuzzyHashes.rebuildHashesFromStrings(hashes);

        UniformFuzzyHash fuzzyHashOfText = new UniformFuzzyHash(text, FACTOR);
        return hashObjects.entrySet().stream()
                .filter(entry -> fuzzyHashOfText.similarity(entry.getValue()) >= SIMILARITY_THRESHOLD)
                .map(entry -> entry.getKey())
                .collect(Collectors.toList());
    }

    public static String generateFuzzyHash(String text) {
        UniformFuzzyHash fuzzyHash = new UniformFuzzyHash(text, FACTOR);
        return fuzzyHash.toString();
    }
}
