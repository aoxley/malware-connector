package com.oxleya.malwareconnector.similarity;

import org.springframework.stereotype.Service;

import java.util.Arrays;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * Used to calculate how similar text blocks are to each other using the jaccard index.
 *
 * You first need to generate the minhash integer array for a block of text. When you have two arrays (for
 * two different blocks of text) you can compare them to see how similar they are.
 */
@Service
public class JaccardIndexSimilarityService {

    private static final double SIMILARITY_THRESHOLD = 0.6d;

    public static Boolean isSimilar(double similarityScore) {
        return similarityScore >= SIMILARITY_THRESHOLD;
    }

    /**
     * Uses the concept of Jaccard similarity to determine how similar two blocks of text are.
     *
     * It breaks down the text into an array of strings based off spaces, using this to feed into the formula.
     * @param blockOne
     * @param blockTwo
     * @return
     */
    public double determineSimilarityScore(String blockOne, String blockTwo) {
        blockOne = sanitizeText(blockOne);
        blockTwo = sanitizeText(blockTwo);

        Set<String> blockOneUniqueWords = Arrays.stream(blockOne.split(" +")).collect(Collectors.toSet());
        Set<String> blockTwoUniqueWords = Arrays.stream(blockTwo.split(" +")).collect(Collectors.toSet());

        int uniqueWordCountBlockOne = blockOneUniqueWords.size();
        int uniqueWordCountBlockTwo = blockTwoUniqueWords.size();

        blockOneUniqueWords.retainAll(blockTwoUniqueWords);
        int intersect = blockOneUniqueWords.size();

        return ((double) intersect / (uniqueWordCountBlockOne + uniqueWordCountBlockTwo - intersect));
    }

    /**
     * Sanitizes the incoming text for use in the algorithm.
     *
     * Removes new lines, and removes all non alphanumeric characters.
     * @param blockOfText
     * @return
     */
    private String sanitizeText(String blockOfText) {
        //remove new lines
        blockOfText = blockOfText.replaceAll("\n", " ").replaceAll("\r", " ");
        //remove all non alphanumeric characters.
        return blockOfText.replaceAll("[^A-Za-z0-9 ]", "");
    }
}
