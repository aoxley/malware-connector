package com.oxleya.malwareconnector.router;

import com.oxleya.malwareconnector.file_type.enums.FileTypeEnum;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.integration.annotation.Router;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;

import static com.oxleya.malwareconnector.file_type.enums.FileTypeEnum.getByContentType;
import static com.oxleya.malwareconnector.file_type.enums.FileTypeEnum.getByFileExtension;
import static com.oxleya.malwareconnector.file_type.enums.FileTypeEnum.getFileExtensionFromFileName;

@Component
public class MalwareRouter {

    public static final String JAVASCRIPT_TRANSFORMER_CHANNEL = "transformJavascriptChannel";
    public static final String EMAIL_TRANSFORMER_CHANNEL = "transformEmailChannel";

    private static final Logger LOGGER = LoggerFactory.getLogger(MalwareRouter.class);

    @Router(inputChannel = "unknownFileInputChannel")
    public String determineChannelFileShouldTravel(File malware) throws IllegalArgumentException {
        LOGGER.info("New file picked up for processing: " + malware.getName());
        FileTypeEnum fileType = determineFileType(malware);

        return channelForFileType(fileType);
    }

    private FileTypeEnum determineFileType(File malware) {
        String contentType = null;
        try {
            contentType = Files.probeContentType(malware.toPath());
        } catch (IOException e) {
            LOGGER.debug("Unable to determine file by content type. Will try extension.");
        }
        FileTypeEnum fileType = getByContentType(contentType);
        if (fileType != null) {
            return fileType;
        }

        fileType = getByFileExtension(getFileExtensionFromFileName(malware.getName()));
        if (fileType != null) {
            return fileType;
        }

        throw new IllegalArgumentException("The system could not determine the file type of " + malware.getName());
    }

    private String channelForFileType(FileTypeEnum fileType) {
        switch (fileType) {
            case JAVASCRIPT_FILE:
                return JAVASCRIPT_TRANSFORMER_CHANNEL;
            case EXCHANGE_EMAIL:
                return EMAIL_TRANSFORMER_CHANNEL;
            default:
                LOGGER.warn("The file does not have an implementation. Will fail this file. File type: " + fileType);
                throw new IllegalArgumentException("The file does not have an implementation. Will fail this file. File type: " + fileType);
        }
    }
}
