package com.oxleya.malwareconnector.processor;

import com.oxleya.malwareconnector.gateway.PushFileForProcessingGateway;
import com.oxleya.malwareconnector.transaction.IntegrationTransactionService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;

import javax.annotation.Resource;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

/**
 * Base attachment processor. Handles common functionality to writing to the correct location.
 */
public class BaseAttachmentProcessor {

    private static final Logger LOGGER = LoggerFactory.getLogger(BaseAttachmentProcessor.class);

    @Value("${base.application.folder}")
    private String baseApplicationFolder;

    @Value("${extracted.file.input.folder}")
    private String extractedFileFolder;

    @Resource
    private PushFileForProcessingGateway pushFileForProcessingGateway;

    @Resource
    private IntegrationTransactionService integrationTransactionService;

    protected void createFileForProcessing(String filename, Long parentId, byte[] data) {
        try {
            if (Files.notExists(Paths.get(baseApplicationFolder + File.separator + extractedFileFolder))) {
                Files.createDirectories(Paths.get(baseApplicationFolder + File.separator + extractedFileFolder));
            }
            Path newFile = Files.createFile(Paths.get(baseApplicationFolder + File.separator + extractedFileFolder + File.separator + filename));
            Files.write(newFile, data);
            pushAttachmentForProcessing(parentId, newFile);
        } catch (IOException e) {
            LOGGER.warn("Unable to write out attachment to input directory, in order to process the attachment. Attachment was " + filename);
            LOGGER.warn("Nothing more can be done with this attachment.");
        }
    }

    private void pushAttachmentForProcessing(Long parentId, Path newFile) {
        try {
            pushFileForProcessingGateway.push(newFile.toFile(), parentId);
        } catch (Exception e) {
            try {
                integrationTransactionService.onFailure(newFile.toString());
            } catch (IOException e1) {
                LOGGER.error("An error occurred during processing an attachment. The transaction has also failed to write the file " + newFile.getFileName()+ " to the failure folder.");
            }
            return;
        }
        try {
            integrationTransactionService.onSuccess(newFile.toString());
        } catch (IOException e) {
            LOGGER.error("While processing an attachment, the transaction was not able to successfully complete by writing the file " + newFile.getFileName() + " to the success folder.");
        }
    }
}
