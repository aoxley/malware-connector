package com.oxleya.malwareconnector.processor;

import com.auxilii.msgparser.Message;
import com.auxilii.msgparser.attachment.FileAttachment;
import com.oxleya.malwareconnector.file_type.data.EmailFile;
import com.oxleya.malwareconnector.file_type.repository.EmailFileRepository;
import com.oxleya.malwareconnector.similarity.FuzzyHashSimilarityService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.integration.annotation.ServiceActivator;
import org.springframework.messaging.handler.annotation.Header;
import org.springframework.stereotype.Component;

import javax.annotation.Resource;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static com.oxleya.malwareconnector.file_type.data.BaseEntity.SIMILARITY_REASON_FROM_ADDRESS;
import static com.oxleya.malwareconnector.file_type.data.BaseEntity.SIMILARITY_REASON_FUZZY_HASH;
import static com.oxleya.malwareconnector.gateway.PushFileForProcessingGateway.PARENT_ID;

@Component
public class EmailProcessor {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmailProcessor.class);

    @Resource
    private EmailFileRepository emailFileRepository;
    @Resource
    private EmailAttachmentProcessor emailAttachmentProcessor;

    @ServiceActivator(inputChannel = "emailProcessingChannel", outputChannel = "nullChannel")
    public void processEmail(Message email, @Header(value = PARENT_ID, required = false) Long parentFileId) {
        LOGGER.info("Processing email: " + email.getSubject());
        LOGGER.info("subject: " + email.getSubject());

        EmailFile emailFile = generateEmailFileObject(email);
        emailFile = emailFileRepository.save(emailFile, parentFileId);

        pushAttachmentsForProcessing(email, emailFile.getId());
    }

    private EmailFile generateEmailFileObject(Message email) {
        final EmailFile emailFile = new EmailFile();
        emailFile.setBody(email.getBodyText());
        emailFile.setFromAddress(email.getFromEmail());
        emailFile.setFromName(email.getFromName());
        emailFile.setSubject(email.getSubject());
        emailFile.setToAddress(email.getToEmail());
        emailFile.setFuzzyHashOfBody(FuzzyHashSimilarityService.generateFuzzyHash(email.getBodyText()));

        linkToSimilarEmailsViaFuzzyHash(emailFile);
        linkToSimilarEmailsViaFromAddress(emailFile);

        return emailFile;
    }

    private void linkToSimilarEmailsViaFuzzyHash(EmailFile newEmail) {
        List<EmailFile> allSavedEmails = (List<EmailFile>) emailFileRepository.findAll();
        final Map<Long, String> hashes = allSavedEmails.stream().collect(Collectors.toMap(EmailFile::getId, EmailFile::getFuzzyHashOfBody));
        List<Long> idsOfSimilarEmailFiles = FuzzyHashSimilarityService.areSimilar(newEmail.getBody(), hashes);
        for (EmailFile savedEmail : allSavedEmails) {
            if (idsOfSimilarEmailFiles.contains(savedEmail.getId())) {
                newEmail.linkToSimilarNode(savedEmail, SIMILARITY_REASON_FUZZY_HASH);
            }
        }
    }

    private void linkToSimilarEmailsViaFromAddress(EmailFile newEmail) {
        final List<EmailFile> allSavedEmails = (List<EmailFile>) emailFileRepository.findAll();
        final List<Long> emailIdWithIdenticalFromAddress = allSavedEmails.stream()
                .filter(savedEmail -> newEmail.getFromAddress().equals(savedEmail.getFromAddress()))
                .map(EmailFile::getId)
                .collect(Collectors.toList());
        for (EmailFile savedEmail : allSavedEmails) {
            if (emailIdWithIdenticalFromAddress.contains(savedEmail.getId())) {
                newEmail.linkToSimilarNode(savedEmail, SIMILARITY_REASON_FROM_ADDRESS);
            }
        }
    }

    private void pushAttachmentsForProcessing(Message email, Long savedEmailId) {
        email.getAttachments().stream()
                .filter(attachment -> attachment instanceof FileAttachment)
                .forEach(attachment -> emailAttachmentProcessor.pushAttachmentForProcessing((FileAttachment) attachment, savedEmailId));
    }
}
