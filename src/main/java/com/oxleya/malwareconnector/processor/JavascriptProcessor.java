package com.oxleya.malwareconnector.processor;

import com.oxleya.malwareconnector.file_type.data.JavascriptFile;
import com.oxleya.malwareconnector.file_type.repository.JavascriptFileRepository;
import com.oxleya.malwareconnector.similarity.FuzzyHashSimilarityService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.integration.annotation.ServiceActivator;
import org.springframework.messaging.handler.annotation.Header;
import org.springframework.stereotype.Component;

import javax.annotation.Resource;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static com.oxleya.malwareconnector.file_type.data.BaseEntity.SIMILARITY_REASON_FUZZY_HASH;
import static com.oxleya.malwareconnector.gateway.PushFileForProcessingGateway.PARENT_ID;


@Component
public class JavascriptProcessor {

    private static final Logger LOGGER = LoggerFactory.getLogger(JavascriptProcessor.class);

    @Resource
    private JavascriptFileRepository javascriptFileRepository;

    /**
     * process a javascript file.
     * @param javascript
     */
    @ServiceActivator(inputChannel = "javascriptProcessingChannel", outputChannel = "nullChannel")
    public void processJavascript(String javascript, @Header(value = PARENT_ID, required = false) Long parentFileId) {
        LOGGER.debug("Javascript Code: " + javascript);
        javascriptFileRepository.save(generateJavascriptFileObject(javascript), parentFileId);
    }

    private JavascriptFile generateJavascriptFileObject(String javascript) {
        JavascriptFile javascriptFile = new JavascriptFile();
        javascriptFile.setFuzzyHash(FuzzyHashSimilarityService.generateFuzzyHash(javascript));
        javascriptFile.setText(javascript);
        linkToSimilarJavascriptFiles(javascriptFile);
        return javascriptFile;
    }

    private void linkToSimilarJavascriptFiles(JavascriptFile javascriptFile) {
        List<JavascriptFile> allSavedJavascriptFiles = (List<JavascriptFile>) javascriptFileRepository.findAll();
        final Map<Long, String> hashes = allSavedJavascriptFiles.stream().collect(Collectors.toMap(JavascriptFile::getId, JavascriptFile::getFuzzyHash));
        List<Long> idsOfSimilarJavascriptFiles = FuzzyHashSimilarityService.areSimilar(javascriptFile.getText(), hashes);
        for (JavascriptFile jsFile : allSavedJavascriptFiles) {
            if (idsOfSimilarJavascriptFiles.contains(jsFile.getId())) {
                javascriptFile.linkToSimilarNode(jsFile, SIMILARITY_REASON_FUZZY_HASH);
            }
        }
    }
}
